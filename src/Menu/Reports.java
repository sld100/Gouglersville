/*
 * Group 2 IST 411 Spring 2017.
 * Gouglersville Fire House Kitchen Inventory
 * and open the template in the editor.
 */
package Menu;


import java.awt.Color;
import java.awt.Component;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import java.util.logging.*;
import net.proteanit.sql.*;
import java.util.*;
import javax.swing.event.*;
import javax.swing.table.*;
;

/**
 *
 * Author IST 411 Group 2
 */
public class Reports extends javax.swing.JFrame implements TableModelListener
{
 
private static final String DataBase = "org.sqlite.JDBC";
private static final String JDBCThinger = "jdbc:sqlite:";
private static String DBName = "F:\\Gouglersville (Unzipped Files)\\Gouglersville\\src\\Menu\\GouglersvilleMenu.db"; 
Connection connect = null;
Statement onHandstatement = null;
Statement inventoryStatement = null;
Statement depletedStatement = null;
ListSelectionListener listSelectionListener;
public String selectedSearch;
public static final int intKEYCOLUMN = 0;  
public String [] menuList= {"Appetizers", "Burgers","Club Sandwiches","Deserts","Dinner Entrees", "Extras",
"French Fries", "Hot Sandwiches", "Pasta or Stir Fry","Salads","Vegetables","Soups", "Wings","Wraps"};
private ResultSet onHandRS; 
private ResultSet inventoryRS;
private ResultSet depletedRS;
DefaultListModel menuLister = new DefaultListModel();
DefaultListModel<String> model;
private int rowColored;

    
public Reports(Connection inConnect)
{
initComponents();
connect = inConnect;


startJlist();

tablelist.addListSelectionListener(listSelectionListener);
}
  

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        onHand = new javax.swing.JCheckBox();
        depleted = new javax.swing.JCheckBox();
        inventory = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablelist = new javax.swing.JList<>(menuList);
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        startDate = new javax.swing.JFormattedTextField();
        endDate = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        ReturntoMain = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setOpaque(false);
        jScrollPane1.setViewportView(table);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Inventory Reporting ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Start Date (YYYY-MM-DD):");

        onHand.setText("Curent on Hand");
        onHand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onHandActionPerformed(evt);
            }
        });

        depleted.setText("Depleted Reports");
        depleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depletedActionPerformed(evt);
            }
        });

        inventory.setText("Inventory Reports");
        inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryActionPerformed(evt);
            }
        });

        tablelist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tablelist);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setWheelScrollingEnabled(false);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Please make a selction of what item you would like to check inventory on: ");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(null);
        jScrollPane3.setViewportView(jTextArea1);

        startDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        endDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("End Date (YYYY-MM-DD):");

        ReturntoMain.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ReturntoMain.setText("Return to Main Menu");
        ReturntoMain.setBorder(null);
        ReturntoMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturntoMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(265, 265, 265)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(onHand)
                                .addGap(27, 27, 27)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(inventory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(depleted))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(84, 211, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ReturntoMain, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 175, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(onHand)
                            .addComponent(inventory)
                            .addComponent(depleted))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(ReturntoMain, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

       
        

    private void ReturntoMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturntoMainActionPerformed
MainFrame MF = new MainFrame();
MF.main(null);
// button to return to main screen
    }//GEN-LAST:event_ReturntoMainActionPerformed
public void runCurrentDate()
{
DateTimeFormatter defaultDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
LocalDate localDate = LocalDate.now();
System.out.println(defaultDate.format(localDate));
startDate.setText(localDate.toString());
endDate.setText(localDate.toString());
}
    public void startJlist()
{

tablelist.addListSelectionListener(new ListSelectionListener()
{
    public void valueChanged(ListSelectionEvent e)
    {
        if (e.getValueIsAdjusting())
        {
            final List<String> selectedValuesList;
            selectedValuesList = tablelist.getSelectedValuesList();
            convertSelected ();
          
        }// end if 
        }// end method value cahnged 
    }); // end list listners  
    } // end method to fill and start jlist 
    
    
    

    
    



// private void createNewTableModel()  {
//    table.setModel(DbUtils.resultSetToTableModel(rs));
//  }
public void convertSelected ()
{
    String selected = tablelist.getSelectedValue();
        switch (selected)
        {
            case "Appetizers":  selectedSearch = "AP";
                     break;
            case "Burgers":  selectedSearch = "BGR";
                     break;
            case "Club Sandwiches":  selectedSearch = "CLUB";
                     break;
            case "Deserts":  selectedSearch = "DSRT";
                     break;
            case "Dinner Entrees":  selectedSearch = "DNR";
                     break;
            case "Extras":  selectedSearch = "EXT";
                     break;
            case "French Fries":  selectedSearch = "FF";
                     break;
            case "Hot Sandwiches":  selectedSearch = "HOT";
                     break;
            case "Pasta or Stir Fry":  selectedSearch = "PSTA";
                     break;
            case "Salads": selectedSearch = "SALAD";
                     break;
            case "Vegetables": selectedSearch = "VGTB";
                     break;
            case "Soups": selectedSearch = "SOUP";
                     break;
            case "Wings": selectedSearch = "WNG";
                   break;
            case "Wraps": selectedSearch ="WRAP";
                         break;
            default: selectedSearch = "no Selection";
                     break;
        } // end switch
} // end method to convert selected to LIKE stribg for jTable serach result set

public void fillTableSelected ()
{
    try 
    {
        depletedStatement = connect.createStatement(); 
        String selected = tablelist.getSelectedValue();
        System.out.println(selected);
        convertSelected();
        System.out.println("at converted"+selectedSearch);
        depletedRS = depletedStatement.executeQuery("SELECT * from Menu_Items WHERE Menu_ID LIKE '"+ selectedSearch + "%'");
        System.out.println(selectedSearch);
        table.setModel(DbUtils.resultSetToTableModel(depletedRS));
        table.getModel().addTableModelListener(this);     
                                   
    }
    catch (SQLException ex)
    {
        Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
    }
}// end method to fill jTable with item selected fromjlist 

    private void inventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryActionPerformed
if(inventory.isSelected())
{
String fromDate = startDate.getText();
String toDate = endDate.getText();
if (startDate.getText().equals("") )
    {
        runCurrentDate();
           
    }
else if (endDate.getText().equals(""))
{
    toDate=fromDate;   
   
    
}
try 
    {
        inventoryStatement = connect.createStatement();
        inventoryRS = inventoryStatement.executeQuery("SELECT * FROM Truck_In ");//WHERE Date >= '" + fromDate +"' AND Date <= '" + toDate+ "'");
        table.setModel(DbUtils.resultSetToTableModel(inventoryRS));
        table.getModel().addTableModelListener(this); 
        table.getColumn("OnHand").setMaxWidth(0);
        table.getColumn("OnHand").setMinWidth(0);
        table.getColumn("OnHand").setMaxWidth(0);
        table.getColumn("OnHand").setWidth(0);
        
                                           
    } // end tey
catch (SQLException ex)
{
 Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
} 
}//end catch
    }//GEN-LAST:event_inventoryActionPerformed

    
    private void depletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depletedActionPerformed
if(depleted.isSelected())
{
    fillTableSelected();
}                               
    
    }//GEN-LAST:event_depletedActionPerformed

    private void onHandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onHandActionPerformed
   if(onHand.isSelected())
   {
       
   
try 
    {
       
        
        
        Statement onHandStatement = connect.createStatement();
        onHandRS = onHandStatement.executeQuery("SELECT * FROM Truck_In");
        table.setModel(DbUtils.resultSetToTableModel(onHandRS));
        table.getModel().addTableModelListener(this); 
        table.getColumn("Date").setMaxWidth(0);
        table.getColumn("Date").setMinWidth(0);
        table.getColumn("Date").setMaxWidth(0);
        table.getColumn("Date").setWidth(0);
        table.getColumn("Cases").setMaxWidth(0);
        table.getColumn("Cases").setMinWidth(0);
        table.getColumn("Cases").setMaxWidth(0);
        table.getColumn("Cases").setWidth(0);
        table.getColumn("Items_Per_Case").setMaxWidth(0);
        table.getColumn("Items_Per_Case").setMinWidth(0);
        table.getColumn("Items_Per_Case").setMaxWidth(0);
        table.getColumn("Items_Per_Case").setWidth(0);
        table.getColumn("Total_Items_Recieved").setMaxWidth(0);
        table.getColumn("Total_Items_Recieved").setMinWidth(0);
        table.getColumn("Total_Items_Recieved").setMaxWidth(0);
        table.getColumn("Total_Items_Recieved").setWidth(0);
        
                                           
    } // end tey
catch (SQLException ex)
{
 Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
} //end catch and method to show all on hand
   }
    }//GEN-LAST:event_onHandActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    String DataBase = "org.sqlite.JDBC";
                    String JDBCThinger = "jdbc:sqlite:";
                    String DBName = "F:\\Gouglersville (Unzipped Files)\\Gouglersville\\src\\Menu\\GouglersvilleMenu.db";
                    Class.forName(DataBase);
                    Connection connect = DriverManager.getConnection(JDBCThinger + DBName);
                    new Reports(connect).setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ReturntoMain;
    private javax.swing.JCheckBox depleted;
    private javax.swing.JFormattedTextField endDate;
    private javax.swing.JCheckBox inventory;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JCheckBox onHand;
    private javax.swing.JFormattedTextField startDate;
    private javax.swing.JTable table;
    private javax.swing.JList<String> tablelist;
    // End of variables declaration//GEN-END:variables

    @Override
    
      

   

    public void tableChanged(TableModelEvent e) {
        int it = -1;
        int row = e.getFirstRow();  
        int column = e.getColumn();  
        TableModel model = (TableModel)e.getSource();  
     
         System.out.println(e);
     

        Integer iKey = (Integer)model.getValueAt(row, intKEYCOLUMN);
        Integer data = new Integer((String) model.getValueAt(row, column));  
        int intData = data.intValue();
        System.out.println("key = " + iKey + "   data = " + data);
        boolean rowColored = true;
        Object dataDate=startDate.getText();        
     try {
String strSQL = "UPDATE Truck_In SET ONHAND = " + intData + ", DATE =" + dataDate  + " WHERE Product_No ='"+ iKey.intValue() + "';";
         System.out.println("strSQL = " + strSQL);
         it = inventoryStatement.executeUpdate(strSQL);
          // it = searchstatement.executeUpdate("UPDATE Truck_In SET DATE =" +dataDate+ " WHERE Product_No ='"+ strKey+ "';");
       
     } catch (SQLException ex) {
         Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
     }
      
        System.out.println(it + " rows updated");

    }
   
class CustomRenderer extends DefaultTableCellRenderer 
{
//private static final long serialVersionUID = 6703872492730589499L;

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
    {
        Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
       if ( rowColored == 1)
       {
                
            cellComponent.setBackground(Color.YELLOW);
        }
        return cellComponent;
    }
}

}
