package Menu;

import static Menu.Inventory.intKEYCOLUMN;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author levat_000
 */
public class Depleted extends javax.swing.JFrame implements TableModelListener
{
private static final String DataBase = "org.sqlite.JDBC";
    private static final String JDBCThinger = "jdbc:sqlite:";
    private static String DBName = "F:\\Gouglersville (Unzipped Files)\\Gouglersville\\src\\Menu\\GouglersvilleMenu.db"; 
    Connection connect = null;
    Statement depletedOutSearchstatement = null;
    String depletedselected;
    ListSelectionListener listSelectionListener;
    ResultSet depletedOutRS; 
   // DefaultListModel tableNames = new DefaultListModel();
    public static final int intKEYCOLUMN = 0;
  private Object dataDate;
  private Object iKey;
    public String [] menuList= {"Appetizers", "Burgers","Club Sandwiches","Deserts","Dinner Entrees", "Extras",
"French Fries", "Hot Sandwiches", "Pasta or Stir Fry","Salads","Vegetables","Soups", "Wings","Wraps"};
    /**
     * Creates new form Depleted
     */
    public Depleted(Connection inConnect) {
        connect=inConnect;
        initComponents();
        startJlist();
          
  
depletedtablelist.addListSelectionListener(listSelectionListener);
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DepletedLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        DateField = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        depletedTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        depletedtablelist = new javax.swing.JList<String>(menuList);
        reconcileDepleted = new javax.swing.JButton();
        depletedRreturnToMain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DepletedLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        DepletedLabel.setText("Depleted Stock");

        dateLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        dateLabel.setText("Date (YYYY-MM-DD):");

        DateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        depletedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(depletedTable);

        jScrollPane2.setViewportView(depletedtablelist);

        reconcileDepleted.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reconcileDepleted.setText("Reconcile Depleted");
        reconcileDepleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reconcileDepletedActionPerformed(evt);
            }
        });

        depletedRreturnToMain.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        depletedRreturnToMain.setText("Return To Main ");
        depletedRreturnToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depletedRreturnToMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(depletedRreturnToMain, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(335, 335, 335)
                        .addComponent(reconcileDepleted, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DepletedLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(DateField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 219, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DepletedLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateLabel)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(reconcileDepleted, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(depletedRreturnToMain, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   

 public void startJlist()
{
runCurrentDate();
depletedtablelist.addListSelectionListener(new ListSelectionListener()
{
    public void valueChanged(ListSelectionEvent e)
    {
        if (e.getValueIsAdjusting())
        {
            final List<String> selectedValuesList;
            selectedValuesList = depletedtablelist.getSelectedValuesList();
          
            convertSelected ();
           fillSelected();
        }// end if 
        }// end method value cahnged 
    }); // end list listners  
    } // end method to fill and start jlist 
 public void runCurrentDate()
{
DateTimeFormatter defaultDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
LocalDate localDate = LocalDate.now();

DateField.setText(localDate.toString());

}
 public void valueChanged(ListSelectionEvent e)
    {
        if (e.getValueIsAdjusting())
        {
           depletedTable.getModel().addTableModelListener((TableModelListener) this); 
           
            
            
        }// end if 
        }// end method value cahnged 
     // end list listners  
     // end method to fill and start jlist 
 public void convertSelected ()
{
    String selected = depletedtablelist.getSelectedValue();
        switch (selected)
        {
            case "Appetizers":  depletedselected = "AP";
                     break;
            case "Burgers":  depletedselected = "BGR";
                     break;
            case "Club Sandwiches":  depletedselected = "CLUB";
                     break;
            case "Deserts":  depletedselected = "DSRT";
                     break;
            case "Dinner Entrees":  depletedselected = "DNR";
                     break;
            case "Extras":  depletedselected = "EXT";
                     break;
            case "French Fries":  depletedselected= "FF";
                     break;
            case "Hot Sandwiches":  depletedselected = "HOT";
                     break;
            case "Pasta or Stir Fry":  depletedselected = "PSTA";
                     break;
            case "Salads": depletedselected = "SALAD";
                     break;
            case "Vegetables": depletedselected = "VGTB";
                     break;
            case "Soups": depletedselected = "SOUP";
                     break;
            case "Wings": depletedselected = "WNG";
                   break;
            case "Wraps": depletedselected ="WRAP";
                         break;
            default: depletedselected = "no Selection";
                     break;
        } // end switch
} // end method to convert selected to LIKE stribg for jTable serach result set


  public void fillSelected ()
 {try 
 {
depletedOutSearchstatement =connect.createStatement();

convertSelected();    

depletedOutRS  = depletedOutSearchstatement.executeQuery("SELECT Menu_ID, Menu_Desc, '' as Sold, ' ' as Destroyed, '' as Total_Depleted from Menu_Items WHERE Menu_ID LIKE '"+ depletedselected+ "%'");
depletedTable.setModel(DbUtils.resultSetToTableModel(depletedOutRS));
        depletedTable.getModel().addTableModelListener(this);

//depletedTable.getColumn("OnHand").setMaxWidth(0);
//depletedTable.getColumn("OnHand").setMinWidth(0);
//depletedTable.getColumn("OnHand").setMaxWidth(0);
//depletedTable.getColumn("OnHand").setWidth(0);
//            
         
                                      
         } catch (SQLException ex) {
             Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
         }
 }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
 
     fillSelected();
 
    }                                        

    private void depletedRreturnToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depletedRreturnToMainActionPerformed
       MainFrame MF = new MainFrame();
          MF.main(null);
                    this.dispose();
    }//GEN-LAST:event_depletedRreturnToMainActionPerformed

    private void reconcileDepletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reconcileDepletedActionPerformed
       try {   
int it =depletedOutSearchstatement.executeUpdate("UPDATE Menu_Items set Total_Depleted = Sold + Destroyed Where Date = "+ dataDate );
System.out.println(dataDate + "first");
it =depletedOutSearchstatement.executeUpdate("UPDATE Truck_In set OnHand = OnHand - ((Select Total_Depleted From Menu_Items Where Menu_ID = " + iKey + " AND Date = "+ dataDate + ") * (SELECT " + iKey + " from Items_To_Menu));");
 depletedOutRS = depletedOutSearchstatement.executeQuery("Select * from Menu_Items");
  

       depletedTable.setModel(DbUtils.resultSetToTableModel(depletedOutRS));
depletedTable.getColumn("Date").setMaxWidth(0);
        depletedTable.getColumn("Date").setMinWidth(0);
        depletedTable.getColumn("Date").setMaxWidth(0);
        depletedTable.getColumn("Date").setWidth(0);
} catch (SQLException ex) {
Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
}
    
 // TODO add your handling code here:        
// TODO add your handling code here:
    }//GEN-LAST:event_reconcileDepletedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Depleted.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Depleted.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Depleted.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Depleted.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
                try {
                    String DataBase = "org.sqlite.JDBC";
                    String JDBCThinger = "jdbc:sqlite:";
                    String DBName = "F:\\Gouglersville (Unzipped Files)\\Gouglersville\\src\\Menu\\GouglersvilleMenu.db";
                    Class.forName(DataBase);
                    Connection connect = DriverManager.getConnection(JDBCThinger + DBName);
                    new Depleted(connect).setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Depleted.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Depleted.class.getName()).log(Level.SEVERE, null, ex);
                }
            }        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField DateField;
    private javax.swing.JLabel DepletedLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton depletedRreturnToMain;
    private javax.swing.JTable depletedTable;
    private javax.swing.JList<String> depletedtablelist;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton reconcileDepleted;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
     
                    int it = -1;
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    TableModel model = (TableModel)e.getSource();
                iKey = model.getValueAt(row, intKEYCOLUMN);
                    Object data = model.getValueAt(row, column);
                    Object dataColumn = model.getColumnName(column);
                    
                    System.out.println("key = " + iKey + "   data = " + data + "COLUMN" + dataColumn);
                    boolean rowColored = true;
                    dataDate=DateField.getText();
                    try
                    {
                        String strSQL = "UPDATE Menu_Items SET " + dataColumn + "= " + data + " WHERE Menu_ID ='"+ iKey+ "';";
                        
                      
                        
                        it = depletedOutSearchstatement.executeUpdate(strSQL);
                         strSQL = "UPDATE Menu_Items SET Date = " + dataDate + " WHERE Menu_ID ='"+ iKey+ "';";
                        
                  
                        it = depletedOutSearchstatement.executeUpdate(strSQL);
                    }
                    catch (SQLException ex)
                    {
                        Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
                    }
}
}
